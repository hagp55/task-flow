services:
  db:
    image: postgres:16.8-alpine3.21
    volumes:
      - pg_data:/var/lib/postgresql/data/
    healthcheck:
      interval: 10s
      retries: 10
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      timeout: 2s
    env_file:
      - .env
    networks:
      - app_network
    restart: unless-stopped

  redis:
    image: redis:7.2.7-alpine3.21
    container_name: redis_container
    networks:
      - app_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        alembic upgrade head &&
        poetry run uvicorn src.main:app --host=${APP_HOST} --port=${APP_PORT:-8000} --http httptools --reload"
    volumes:
      - .:/app
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - rabbitmq

  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./robots.txt:/etc/nginx/templates/robots.txt:ro
      - ./nginx/logs:/var/log/nginx
    ports:
    - "80:80"
    restart: on-failure
    networks:
      - app_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      retries: 3
      timeout: 5s
      start_period: 10s

volumes:
  pg_data:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge
